// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mGTdfPd9SxMJIrvMaPHfAAAA//+s8aeGFT0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
